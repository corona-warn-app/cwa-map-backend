// Code generated by mockery v2.8.0. DO NOT EDIT.

package services

import (
	context "context"

	domain "com.t-systems-mms.cwa/domain"
	mock "github.com/stretchr/testify/mock"
)

// Centers is an autogenerated mock type for the Centers type
type Centers struct {
	mock.Mock
}

// ImportCenters provides a mock function with given fields: ctx, centers, deleteAll
func (_m *Centers) ImportCenters(ctx context.Context, centers []domain.Center, deleteAll bool) ([]domain.Center, error) {
	ret := _m.Called(ctx, centers, deleteAll)

	var r0 []domain.Center
	if rf, ok := ret.Get(0).(func(context.Context, []domain.Center, bool) []domain.Center); ok {
		r0 = rf(ctx, centers, deleteAll)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Center)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []domain.Center, bool) error); ok {
		r1 = rf(ctx, centers, deleteAll)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PerformGeocoding provides a mock function with given fields: centers
func (_m *Centers) PerformGeocoding(centers []domain.Center) {
	_m.Called(centers)
}

// Save provides a mock function with given fields: ctx, center, geocoding
func (_m *Centers) Save(ctx context.Context, center *domain.Center, geocoding bool) error {
	ret := _m.Called(ctx, center, geocoding)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Center, bool) error); ok {
		r0 = rf(ctx, center, geocoding)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
