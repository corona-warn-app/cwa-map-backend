// Code generated by mockery v2.8.0. DO NOT EDIT.

package repositories

import (
	context "context"

	domain "com.t-systems-mms.cwa/domain"
	mock "github.com/stretchr/testify/mock"
)

// Operators is an autogenerated mock type for the Operators type
type Operators struct {
	mock.Mock
}

// FindById provides a mock function with given fields: ctx, id
func (_m *Operators) FindById(ctx context.Context, id string) (domain.Operator, error) {
	ret := _m.Called(ctx, id)

	var r0 domain.Operator
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Operator); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Operator)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOperatorBySubject provides a mock function with given fields: ctx, subject
func (_m *Operators) GetOperatorBySubject(ctx context.Context, subject string) (domain.Operator, error) {
	ret := _m.Called(ctx, subject)

	var r0 domain.Operator
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Operator); ok {
		r0 = rf(ctx, subject)
	} else {
		r0 = ret.Get(0).(domain.Operator)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, subject)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrCreateBySubject provides a mock function with given fields: ctx, subject
func (_m *Operators) GetOrCreateBySubject(ctx context.Context, subject string) (domain.Operator, error) {
	ret := _m.Called(ctx, subject)

	var r0 domain.Operator
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Operator); ok {
		r0 = rf(ctx, subject)
	} else {
		r0 = ret.Get(0).(domain.Operator)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, subject)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, operator
func (_m *Operators) Save(ctx context.Context, operator domain.Operator) (domain.Operator, error) {
	ret := _m.Called(ctx, operator)

	var r0 domain.Operator
	if rf, ok := ret.Get(0).(func(context.Context, domain.Operator) domain.Operator); ok {
		r0 = rf(ctx, operator)
	} else {
		r0 = ret.Get(0).(domain.Operator)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.Operator) error); ok {
		r1 = rf(ctx, operator)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
