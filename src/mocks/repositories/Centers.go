// Code generated by mockery v2.8.0. DO NOT EDIT.

package repositories

import (
	context "context"

	domain "com.t-systems-mms.cwa/domain"
	mock "github.com/stretchr/testify/mock"

	repositories "com.t-systems-mms.cwa/repositories"
)

// Centers is an autogenerated mock type for the Centers type
type Centers struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, center
func (_m *Centers) Delete(ctx context.Context, center domain.Center) error {
	ret := _m.Called(ctx, center)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Center) error); ok {
		r0 = rf(ctx, center)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByOperator provides a mock function with given fields: ctx, operator
func (_m *Centers) DeleteByOperator(ctx context.Context, operator string) error {
	ret := _m.Called(ctx, operator)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, operator)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields:
func (_m *Centers) FindAll() []domain.Center {
	ret := _m.Called()

	var r0 []domain.Center
	if rf, ok := ret.Get(0).(func() []domain.Center); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Center)
		}
	}

	return r0
}

// FindByCoordinates provides a mock function with given fields: ctx, target, maxDistance, params, limit
func (_m *Centers) FindByBounds(ctx context.Context, target domain.Coordinates, maxDistance float64, params repositories.SearchParameters, limit uint) ([]domain.CenterWithDistance, error) {
	ret := _m.Called(ctx, target, maxDistance, params, limit)

	var r0 []domain.CenterWithDistance
	if rf, ok := ret.Get(0).(func(context.Context, domain.Coordinates, float64, repositories.SearchParameters, uint) []domain.CenterWithDistance); ok {
		r0 = rf(ctx, target, maxDistance, params, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.CenterWithDistance)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.Coordinates, float64, repositories.SearchParameters, uint) error); ok {
		r1 = rf(ctx, target, maxDistance, params, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByOperator provides a mock function with given fields: ctx, operator, page
func (_m *Centers) FindByOperator(ctx context.Context, operator string, page repositories.PageRequest) (repositories.PagedCentersResult, error) {
	ret := _m.Called(ctx, operator, page)

	var r0 repositories.PagedCentersResult
	if rf, ok := ret.Get(0).(func(context.Context, string, repositories.PageRequest) repositories.PagedCentersResult); ok {
		r0 = rf(ctx, operator, page)
	} else {
		r0 = ret.Get(0).(repositories.PagedCentersResult)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, repositories.PageRequest) error); ok {
		r1 = rf(ctx, operator, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByOperatorAndUserReference provides a mock function with given fields: ctx, operator, number
func (_m *Centers) FindByOperatorAndUserReference(ctx context.Context, operator string, number string) (domain.Center, error) {
	ret := _m.Called(ctx, operator, number)

	var r0 domain.Center
	if rf, ok := ret.Get(0).(func(context.Context, string, string) domain.Center); ok {
		r0 = rf(ctx, operator, number)
	} else {
		r0 = ret.Get(0).(domain.Center)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, operator, number)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUUID provides a mock function with given fields: ctx, uuid
func (_m *Centers) FindByUUID(ctx context.Context, uuid string) (domain.Center, error) {
	ret := _m.Called(ctx, uuid)

	var r0 domain.Center
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Center); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(domain.Center)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, center
func (_m *Centers) Save(ctx context.Context, center *domain.Center) error {
	ret := _m.Called(ctx, center)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Center) error); ok {
		r0 = rf(ctx, center)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveMultiple provides a mock function with given fields: ctx, center
func (_m *Centers) SaveMultiple(ctx context.Context, center []domain.Center) ([]domain.Center, error) {
	ret := _m.Called(ctx, center)

	var r0 []domain.Center
	if rf, ok := ret.Get(0).(func(context.Context, []domain.Center) []domain.Center); ok {
		r0 = rf(ctx, center)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Center)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []domain.Center) error); ok {
		r1 = rf(ctx, center)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UseTransaction provides a mock function with given fields: ctx, fn
func (_m *Centers) UseTransaction(ctx context.Context, fn func(context.Context) error) error {
	ret := _m.Called(ctx, fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context) error) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
